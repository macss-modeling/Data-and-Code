knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(here)
set.seed(1234)
theme_set(theme_minimal())
# get advertising data
advertising <- read_csv(here("data", "Advertising.csv")) %>%
tbl_df() %>%
select(-X1)
# plot separate facets for relationship between ad spending and sales
plot_ad <- advertising %>%
gather(method, spend, -Sales) %>%
ggplot(aes(spend, Sales)) +
facet_wrap(~ method, scales = "free_x") +
geom_point() +
labs(x = "Spending (in thousands of dollars)"); plot_ad
method_model <- function(df) {
lm(Sales ~ spend, data = df)
}
ad_pred <- advertising %>%
gather(method, spend, -Sales) %>%
group_by(method) %>%
nest() %>%
mutate(model = map(data, method_model),
pred = map(model, broom::augment)) %>%
unnest(pred)
plot_ad +
geom_smooth(method = "lm", se = FALSE) +
geom_linerange(data = ad_pred,
aes(ymin = Sales, ymax = .fitted),
color = "blue",
alpha = .5)
library(broom) # model operations
library(lattice)  # for the data
mod <- loess(NOx ~ E,
data = ethanol,
degree = 1,
span = .75)
fit <- augment(mod)
ggplot(fit, aes(E, NOx)) +
geom_point() +
geom_line(aes(y = .fitted), color = "red") +
labs(x = "Equivalence ratio",
y = "Concentration of nitrogen oxides")
# simulate data and fig from ISL 2.9
sim_mse <- tibble(
x = runif(n = 50, min = 0, max = 100),
y = 5.055901 - 0.1848551*x + 0.00748706*x^2 - 0.00005543478*x^3 + rnorm(50, sd = 0.6)
)
# model fit
ggplot(sim_mse, aes(x, y)) +
geom_point() +
stat_function(fun = function(x) 5.055901 - 0.1848551*x + 0.00748706*x^2 - 0.00005543478*x^3) +
geom_smooth(aes(color = "lm"), method = lm, se = FALSE) +
geom_smooth(aes(color = "spline-low"), method = lm,
formula = y ~ splines::ns(x, 5), se = FALSE) +
geom_smooth(aes(color = "spline-high"), method = lm,
formula = y ~ splines::ns(x, 20), se = FALSE) +
scale_color_brewer(type = "qual") +
labs(title = "Training data points",
subtitle = "Models estimated on training set",
x = expression(X),
y = expression(Y)) +
theme(legend.position = "none")
sim_mse_test <- tibble(
x = runif(n = 50, min = 0, max = 100),
y = 5.055901 - 0.1848551 * x + 0.00748706 * x^2 - 0.00005543478 * x^3 + rnorm(50, sd = 0.6)
)
# model fit
ggplot(sim_mse, aes(x, y)) +
geom_point(data = sim_mse_test) +
stat_function(fun = function(x) 5.055901 - 0.1848551*x + 0.00748706*x^2 - 0.00005543478*x^3) +
geom_smooth(aes(color = "lm"), method = lm, se = FALSE) +
geom_smooth(aes(color = "spline-low"), method = lm,
formula = y ~ splines::ns(x, 5), se = FALSE) +
geom_smooth(aes(color = "spline-high"), method = lm,
formula = y ~ splines::ns(x, 20), se = FALSE) +
scale_color_brewer(type = "qual") +
labs(title = "Test data points",
subtitle = "Models estimated on training set",
x = expression(X),
y = expression(Y)) +
theme(legend.position = "none")
ggplot(sim_mse, aes(x, y)) +
geom_point() +
labs(title = "Training data",
x = expression(X),
y = expression(Y))
# estimate
sim_knn1 <- FNN::knn.reg(train = sim_mse,
test = sim_mse,
y = sim_mse$y,
k = 1)
install.packages(‘FNN’)
install.packages(FNN)
install.packages('FNN')
# estimate
sim_knn1 <- FNN::knn.reg(train = sim_mse,
test = sim_mse,
y = sim_mse$y,
k = 1)
# plot
sim_mse %>%
mutate(pred = sim_knn1$pred) %>%
ggplot(aes(x, y)) +
geom_point() +
geom_step(aes(y = pred)) +
labs(title = "Training data",
x = expression(X),
y = expression(Y))
ggplot(sim_mse, aes(x, y)) +
geom_point() +
geom_hline(yintercept = mean(sim_mse$y)) +
labs(title = "Training data",
x = expression(X),
y = expression(Y))
# set number of throws
n_games <- 10
# throw `n_games` of darts and get the coordinates where they hit
dart_game <- function(n_games,
accurate = TRUE,
consistent = TRUE) {
if (accurate & consistent) {
xvals <- rnorm(n_games, mean = 0, sd = .05)
yvals <- rnorm(n_games, mean = 0, sd = .05)
} else if (accurate == TRUE & consistent == FALSE) {
xvals <- rnorm(n_games, mean = .5, sd = .05)
yvals <- rnorm(n_games, mean = .4, sd = .05)
} else if (accurate == FALSE & consistent == TRUE) {
xvals <- rnorm(n_games, mean = 0, sd = .3)
yvals <- rnorm(n_games, mean = 0, sd = .3)
} else if (accurate == FALSE & consistent == FALSE) {
xvals <- rnorm(n_games, mean = .5, sd = .3)
yvals <- rnorm(n_games, mean = -.4, sd = .3)
}
tibble(
x = xvals,
y = yvals,
accurate = accurate,
consistent = consistent
)
}
# get data for each situation
throws <- bind_rows(
dart_game(n_games, accurate = TRUE, consistent = TRUE),
dart_game(n_games, accurate = TRUE, consistent = FALSE),
dart_game(n_games, accurate = FALSE, consistent = TRUE),
dart_game(n_games, accurate = FALSE, consistent = FALSE)
) %>%
mutate(
accurate = ifelse(accurate, "Low Variance", "High Variance"),
consistent = ifelse(consistent, "Low Bias", "High Bias")
)
# plot the dart board, facet by each type
ggplot(data = throws, aes(x, y)) +
facet_grid(accurate ~ consistent) +
ggforce::geom_circle(aes(x = NULL, y = NULL, x0 = 0, y0 = 0, r = 1)) +
geom_point(alpha = 0.5) +
xlim(-1, 1) +
ylim(-1, 1) +
coord_fixed() +
labs(title = NULL,
x = NULL,
y = NULL) +
annotate("point", x = 0, y = 0, size = 3)
install.packages('ggforce')
# set number of throws
n_games <- 10
# throw `n_games` of darts and get the coordinates where they hit
dart_game <- function(n_games,
accurate = TRUE,
consistent = TRUE) {
if (accurate & consistent) {
xvals <- rnorm(n_games, mean = 0, sd = .05)
yvals <- rnorm(n_games, mean = 0, sd = .05)
} else if (accurate == TRUE & consistent == FALSE) {
xvals <- rnorm(n_games, mean = .5, sd = .05)
yvals <- rnorm(n_games, mean = .4, sd = .05)
} else if (accurate == FALSE & consistent == TRUE) {
xvals <- rnorm(n_games, mean = 0, sd = .3)
yvals <- rnorm(n_games, mean = 0, sd = .3)
} else if (accurate == FALSE & consistent == FALSE) {
xvals <- rnorm(n_games, mean = .5, sd = .3)
yvals <- rnorm(n_games, mean = -.4, sd = .3)
}
tibble(
x = xvals,
y = yvals,
accurate = accurate,
consistent = consistent
)
}
# get data for each situation
throws <- bind_rows(
dart_game(n_games, accurate = TRUE, consistent = TRUE),
dart_game(n_games, accurate = TRUE, consistent = FALSE),
dart_game(n_games, accurate = FALSE, consistent = TRUE),
dart_game(n_games, accurate = FALSE, consistent = FALSE)
) %>%
mutate(
accurate = ifelse(accurate, "Low Variance", "High Variance"),
consistent = ifelse(consistent, "Low Bias", "High Bias")
)
# plot the dart board, facet by each type
ggplot(data = throws, aes(x, y)) +
facet_grid(accurate ~ consistent) +
ggforce::geom_circle(aes(x = NULL, y = NULL, x0 = 0, y0 = 0, r = 1)) +
geom_point(alpha = 0.5) +
xlim(-1, 1) +
ylim(-1, 1) +
coord_fixed() +
labs(title = NULL,
x = NULL,
y = NULL) +
annotate("point", x = 0, y = 0, size = 3)
library(tidyverse)
library(here)
anes <- read_csv(here("data", "anes_2016.csv"))
library(tidyverse)
library(here)
anes <- read_csv(here("data", "anes_2016.csv"))
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(here)
set.seed(1234)
theme_set(theme_minimal())
# set number of throws
n_games <- 100
# throw `n_games` of darts and get the coordinates where they hit
dart_game <- function(n_games,
accurate = TRUE,
consistent = TRUE) {
if (accurate & consistent) {
xvals <- rnorm(n_games, mean = 0, sd = .05)
yvals <- rnorm(n_games, mean = 0, sd = .05)
} else if (accurate == TRUE & consistent == FALSE) {
xvals <- rnorm(n_games, mean = .5, sd = .05)
yvals <- rnorm(n_games, mean = .4, sd = .05)
} else if (accurate == FALSE & consistent == TRUE) {
xvals <- rnorm(n_games, mean = 0, sd = .3)
yvals <- rnorm(n_games, mean = 0, sd = .3)
} else if (accurate == FALSE & consistent == FALSE) {
xvals <- rnorm(n_games, mean = .5, sd = .3)
yvals <- rnorm(n_games, mean = -.4, sd = .3)
}
tibble(
x = xvals,
y = yvals,
accurate = accurate,
consistent = consistent
)
}
# get data for each situation
throws <- bind_rows(
dart_game(n_games, accurate = TRUE, consistent = TRUE),
dart_game(n_games, accurate = TRUE, consistent = FALSE),
dart_game(n_games, accurate = FALSE, consistent = TRUE),
dart_game(n_games, accurate = FALSE, consistent = FALSE)
) %>%
mutate(
accurate = ifelse(accurate, "Low Variance", "High Variance"),
consistent = ifelse(consistent, "Low Bias", "High Bias")
)
# plot the dart board, facet by each type
ggplot(data = throws, aes(x, y)) +
facet_grid(accurate ~ consistent) +
ggforce::geom_circle(aes(x = NULL, y = NULL, x0 = 0, y0 = 0, r = 1)) +
geom_point(alpha = 0.5) +
xlim(-1, 1) +
ylim(-1, 1) +
coord_fixed() +
labs(title = NULL,
x = NULL,
y = NULL) +
annotate("point", x = 0, y = 0, size = 3)
library(tidyverse)
library(here)
anes <- read_csv(here("data", "anes_2016.csv"))
View(anes)
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender) %>%
recode(missing = 'NA')
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender) %>%
recode(ftobama, missing = 'NA')
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender)
View(dfnew)
describe(dfnew)
summarize(dfnew)
summarize(dfnew$ftobama)
summarise(dfnew$ftobama)
summary(dfnew$ftobama)
describe(dfnew$ftobama)
table(dfnew$ftobama)
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender) %>%
replace(ftobama, 998, 'NA')
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender) %>%
replace(ftobama==998, 'NA')
table(dfnew$faminc)
table(dfnew$pid3)
table(dfnew$birthyr)
table(dfnew$gender)
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender) %>%
mutate(ftobama = replace(ftobama, ftobama == 998, NA)) %>%
table(dfnew$ftobama)
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender) %>%
mutate(ftobama = replace(ftobama, ftobama == 998, NA)) %>%
table(dfnew$ftobama)
table(dfnew$ftobama)
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender) %>%
mutate(ftobama = replace(ftobama, ftobama == 998, NA))
table(dfnew$ftobama)
summary(dfnew$ftobama)
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender) %>%
mutate(ftobama = replace(ftobama, ftobama == 998, NA)) %>%
filter(is.na(ftobama)==TRUE)
summary(dfnew$ftobama)
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender) %>%
mutate(ftobama = replace(ftobama, ftobama == 998, NA)) %>%
filter(is.na(ftobama)==FALSE)
summary(dfnew$ftobama)
summarise_all(dfnew)
dfnew <- anes %>%
select(ftobama, faminc, pid3, birthyr, gender) %>%
mutate(ftobama = replace(ftobama, ftobama == 998, NA)) %>%
filter(is.na(ftobama)==FALSE)
set.seed(123)
set.seed(123)
split_tidy <- initial_split(dfnew,
prop = 0.75) # default is 75%
library(tidymodels)
library(tidyverse)
install.packages('tidymodels')
install.packages('tidymodels')
se
library(tidymodels)
install.packages('tidymodels')
library(tidymodels)
install.packages('rsample')
library(tidymodels)
library(tidymodels)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
library(tidymodels)
library(tidymodels)
set.seed(123)
split_tidy <- initial_split(dfnew,
prop = 0.75) # default is 75%
# take a look...
split_tidy
# create
train <- training(split_tidy)
test  <- testing(split_tidy)
# viz
tidy <- train %>%
ggplot(aes(x = ftobama)) +
geom_line(stat = "density") +
geom_line(data = test,
stat = "density",
col = "red") +
labs(title = "Via Tidymodels") +
theme_minimal()
tidy
set.seed(123)
split_tidy <- initial_split(anes,
prop = 0.75) # default is 75%
# take a look...
split_tidy
# create
train <- training(split_tidy)
test  <- testing(split_tidy)
# viz
tidy <- train %>%
ggplot(aes(x = ftobama)) +
geom_line(stat = "density") +
geom_line(data = test,
stat = "density",
col = "red") +
labs(title = "Via Tidymodels") +
theme_minimal()
tidy
set.seed(123)
split_tidy <- initial_split(dfnew,
prop = 0.75) # default is 75%
# take a look...
split_tidy
# create
train <- training(split_tidy)
test  <- testing(split_tidy)
```{r echo = TRUE, eval = FALSE}
split_tidy <- initial_split(dfnew,
prop = 0.75) # default is 75%
# take a look...
split_tidy
# create
train <- training(split_tidy)
test  <- testing(split_tidy)
# viz
tidy <- train %>%
ggplot(aes(x = ftobama)) +
geom_line(stat = "density") +
geom_line(data = test,
stat = "density",
col = "red") +
labs(title = "Via Tidymodels") +
theme_minimal()
tidy
install.packages("remotes")
remotes::install_github("uc-cfss/rcfss")
out <- lm(ftobama~. data=train)
out <- lm(ftobama~., data=train)
summary(out)
mse(out)
#install.packages("remotes")
#remotes::install_github("uc-cfss/rcfss")
library(rcfss)
mse(out)
mse(train)
mse(train, out)
mse()
mse(train)
mse(train, TRUE)
mse(train, TRUE, out)
model <- lm(ftobama~., data=train)
summary(model)
test_pred <- pred(model, test)
test_pred <- predict(model, test)
mse(train, train$ftobama)
mse(train, train$ftobama, out)
mse(train, train$ftobama, model)
mse(train, train$ftobama, resid(model))
print(mse(train, train$ftobama, resid(model)))
print(mse(train, train$ftobama, predict(model)))
test_pred <- predict(model, test)
test_pred
plot(test_pred)
print(mse(train, train$ftobama, predict(model, train)))
set.seed(1234)
split_tidy <- initial_split(dfnew,
prop = 0.75) # default is 75%
# take a look...
split_tidy
# create
train <- training(split_tidy)
test  <- testing(split_tidy)
# viz
tidy <- train %>%
ggplot(aes(x = ftobama)) +
geom_line(stat = "density") +
geom_line(data = test,
stat = "density",
col = "red") +
labs(title = "Via Tidymodels") +
theme_minimal()
tidy
model <- lm(ftobama~., data=train)
summary(model)
print(mse(train, train$ftobama, predict(model, train)))
test_pred <- predict(model, test)
print(mse(train, train$ftobama, test_pred))
print(mse(test, test$ftobama, test_pred))
print(mse(test, train$ftobama, test_pred))
print(mse(test, test$ftobama, test_pred))
x^2
x = c(1,2,3)
x^2
dim(train)
dim(train)[0]
dim(train)[1]
mymse <- function(data, truth, estimate) {
mse = sum((truth-estimate)^2)/dim(data)[1]
return(mse)
}
mse(train, train$ftobama, predict(model, train))
mymse(train, train$ftobama, predict(model, train))
mymse(test, test$ftobama, predict(model, test))
mymse(train, train$ftobama, predict(model, train))
mymse(test, test$ftobama, predict(model, test))
#train
print(mymse(train, train$ftobama, predict(model, train)))
#test
print(mymse(test, test$ftobama, predict(model, test)))
#train
print(mymse(train, train$ftobama, predict(model, train)))
#test
print(mymse(test, test$ftobama, predict(model, test)))
